# 연산자 오버로딩
'''
- 메소드 중복정의 : 같은 이름의 메소드를 사용하는 것.
- 파이썬에서는 같은 이름의 메소드를 사용하면 뒤에 정의한 메소드로 덮어쓰기 됨
- 연산자 오버로딩 : 기존 약속되어 있는 (__) 매소드를 재정의해서 해당 클래스에서 객체 간
덧셈 연산을 가능하게 함
    > 연산자 오버로딩을 하지 않으면 인스턴스 간 연산이 되지 않음.
    > 1. 수치 연산자 오버로딩. * 주의: 나누기 경우 파이썬3부터는 div > truediv로 변경
        - 연산자 왼쪽에 피연산자, 연산자 오른쪽에 객체가 오는 경우 메소드 앞에 'r'을
          붙여야 함.
      2. 비교 연산자 오버로딩 : lt, le, eq, ne, ge, gt
      3. 시퀀스/매핑 자료형 오버로딩
- 올바른 연산자 오버로딩
    > isinstance(인스턴스, 클래스) : 해당 객체가 어떤 클래스로부터 만들어졌는지 확인
'''

# 상속과 다형성
'''
- 상속 : 클래스의 속성과 메소드를 부모가 자식에게 물려주는 것
    > 상속받은 자식 클래스는 부모 클래스의 속성과 메소드를 사용할 수 있음.
      (자식 클래스 이름공간에 부모 클래스 이름공간이 포함됨)
    > 코드 재사용 가능
    > 자식 클래스는 필요기능만 정의하거나, 오버라이딩하여 사용 가능
    > 상속의 이유? 
    > 메소드 오버라이딩 : 메소드의 재정의
- 다형성 : 다른 클래스에 속한 같은 이름의 인스턴스들이 동일한 메소드 이름으로 호출할
           경우 동적으로 선택되어 수행(다양한 형태를 가질 수 있음)
    > 장점 
       1. 다른 클래스에 속한 같은 이름의 다양한 메소드들에게 유사한 작업을 수행시킬 수 있음
       2. 추상클래스를 상속하는 다른 서브클래스 내에 작성된 같은 이름의 메소드를 다른 목적으로
          사용할 수 있음.
    > 상속 관계 알아내기 : isinstance(인스턴스, 클래스), issubclass(A클래스,B클래스)
'''

#---------------------------------------------- 실습 -------------------------------------------------------
# 1. 클래스의 연산자 오버로딩을 활용해 더하기 연산이 실제로는 뺄셈이 되도록 코딩
class A:
    def __init__(self, i):
        self.i = i

    def __str__(self):
        return str(self.i)

    def __add__(self, other):
        return self.i - other

a = A(10)
print(a + 5)

# 2. 상속을 활용한 메소드 코딩 : 부모 클래스(아시아)를 상속하여 KOREA 라는 자식클래스 만들고 정보 출력
class Asia :
    def __init__(self, name):
        self.name = name
    def show(self):
        return '해당 국가는 아시아에 있습니다.'

class Korea(Asia):
    def __init__(self, name, population, capital):
        Asia.__init__(self, name)
        self.population = population
        self.capital = capital

    def show_name(self):
        return '국가 이름은 : ' + self.name

a = Asia('대한민국')
print(a.show())

b = Korea("대한민국", '5천만', '서울')
print(b.show_name())
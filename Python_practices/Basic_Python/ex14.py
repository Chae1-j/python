# 객체지향 프로그래밍
"""
컴퓨터 프로그래밍 패러다임의 하나
<> 절차지향 프로그램 : 위에서 아래, 순서대로 실행/ 프로그램이 유기적으로 연결
프로그래밍 주의점
1. 같은 코드를 반복하지 않음
2. 한 번 작성한 코드는 언제든 바뀔 수 있다는 것을 생각
"""
#예제. 학생관리 프로그램 > 파이썬 활용 : 리스트와 사전 자료형
students = [
    {"student_name" : '김학생', "student_number" : '2024001', "studnt_age" : 21},
    {"student_name" : '이학생', "student_number" : '2024002', "studnt_age" : 23},
    {"student_name" : '박학생', "student_number" : '2024003', "studnt_age" : 31}
]
#.... 관련함수 많아지게 됨..... >>>>> '클래스'를 이용!
'''
클래스 : 객체를 조금 더 효율적으로 생성하기 위해 만들어진 구문
class   클래스 이름 :
    클래스 내용
- 대소문자 구별하므로 소문자 class임
- 인스턴스 ? 클래스로부터 만들어진 객체
- 클래스의 이름공간 : 클래스는 별도의 이름공간이 할당
                      인스턴스 또한 별도의 이름공간을 할당 동적으로 인스턴스 내부에 멤버추가 
'''


# 클래스의 메소드
"""
메소드의 정의 : 일반적인 함수와 똑같이 정의하지만 첫 번째 매개변수로 self를 사용(관례적)
    self: 인스턴스 객체 자신의 레퍼런스를 지니고 있음 > 각 인스턴스들은 self를 활용해 자신의 이름공간에 접근가능
> 인스턴스 객체를 활용해 메소드 호출
> 클래스 객체를 활용해 메소드 호출(직접 인스턴스를 적어줌)
- 객체 내부의 메소드를 호출할 수 있음 > self를 ㅈ거어주지 않으면, 외부에서 해당 메소드를 찾게 됨
- 정적 메소드 : 인스턴스 객체와 무관하게 클래스 이름공간에 존재하는 메소드
    > 클래스 이름을 이용하여 직접호출 가능
    > 장식자 @staticmethod 사용
    
* 생성자와 소멸자
 1. 클래스멤버와 인스턴스 멤버
    - 인스턴스 멤버 : 인스턴스 이름공간에 생성, 인스턴스마다 독립
    - 클래스 멤버 : 
 2. 생성자 : 객체가 생성될 때 자동으로 호출되는 함수
    - __init__ 으로 정의 (__ 는 예약된 이름이란 뜻)
    - 
 3. 소멸자 : 객체가 소멸될 때 자동으로 호출되는 함수
    - __del__로 정의
    - 일반적으로 객에가 점유하고 있는 메모리나 기타 자원들의 해제를 하는 코드 작성
"""

#-----------------------------------------실습-----------------------------------------------------------
# 1. time 모듈, 클래스의 생성자와 소멸자를 활용하여 객체의 생성, 소멸 시간 출력
'''
조건: time 모듈의 ctime함수는 현재시간을 출력
    time 모듈의 sleep 함수는 해당 시간 동안 cpu 점유를 막음
    객체 생성 후 3초 동안 sleep
'''
import time

print(time.ctime())
time.sleep(3)
print(time.ctime())

class Life :
    def __init__(self):
        self.birth = time.ctime()
        print(self.birth)

    def __del__(self):
        print(time.ctime())

def test() :
    life = Life ()
    time.sleep(3)
test()